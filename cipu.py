import streamlit as st
import requests
import time
import pymupdf as fitz

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="An√°lise de Projeto", layout="wide")

# Fun√ß√£o auxiliar para obter input num√©rico
def get_input_float(label):
    valor = st.text_input(label, "0")
    try:
        return float(valor)
    except ValueError:
        return 0.0

# Inicializa√ß√£o das vari√°veis de sess√£o
def init_session_state():
    if 'AfastamentoFrontal1' not in st.session_state:
        st.session_state['AfastamentoFrontal1'] = 0.0
    if 'AfastamentoFundo1' not in st.session_state:
        st.session_state['AfastamentoFundo1'] = 0.0
    if 'AfastamentoDireito1' not in st.session_state:
        st.session_state['AfastamentoDireito1'] = 0.0
    if 'AfastamentoEsquerdo1' not in st.session_state:
        st.session_state['AfastamentoEsquerdo1'] = 0.0
    if 'TaxaOcupacao1' not in st.session_state:
        st.session_state['TaxaOcupacao1'] = 0.0
    if 'AlturaMaxima1' not in st.session_state:
        st.session_state['AlturaMaxima1'] = 0.0
    if 'CoeficienteAprovBasico1' not in st.session_state:
        st.session_state['CoeficienteAprovBasico1'] = 0.0
    if 'CoeficienteAprovMaximo1' not in st.session_state:
        st.session_state['CoeficienteAprovMaximo1'] = 0.0
    if 'TaxaPermeabilidade1' not in st.session_state:
        st.session_state['TaxaPermeabilidade1'] = 0.0
    if 'CotaSoleira1' not in st.session_state:
        st.session_state['CotaSoleira1'] = ""
    if 'modo_auto' not in st.session_state:
        st.session_state['modo_auto'] = False
    if 'pdf_linhas' not in st.session_state:
        st.session_state['pdf_linhas'] = []

init_session_state()

# Se√ß√£o de Observa√ß√µes
with st.expander("üìù **Observa√ß√µes - Comece por aqui**"):
    st.write("Utilizar ponto ao em vez de v√≠rgula. Ex.: 13.45")
    st.write("O buscador autom√°tico procura apenas pela LUOS, caso o im√≥vel n√£o tenha LUOS, dever√° ser utilizado a f√≥rma **Preenchimento Manual** no pr√≥ximo t√≥pico")
    st.write("Vers√£o 0.4. Corrigido: importa√ß√£o autom√°tica e adicionado a constula aos mapas e quadros")



# Se√ß√£o 1: Par√¢metros Urban√≠sticos
with st.expander("üìù **Passo 1: Par√¢metros Urban√≠sticos do Terreno**"):
    # Dados das regi√µes e links (no formato: Regi√£o;Link1;Link2)
    # Dados das regi√µes e links (no formato: Regi√£o;Link1;Link2)
    dados_regioes = """
    Gama;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-1A_Gama.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-1A_Gama.pdf
    Taguatinga;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-2A_Taguatinga.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-2A_Taguatinga.pdf
    Brazl√¢ndia;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-3A_Brazlandia.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-3A_Brazlandia.pdf
    Sobradinho;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-4A_Sobradinho.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-4A_Sobradinho.pdf
    Planaltina;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-5A-Planaltina.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-5A_Planaltina.pdf
    Paranoa;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-6A_Paranoa.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-6A_Paranoa.pdf
    Bandeirante;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-7A_Nucleo-Bandeirante.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-7A_Nucleo-Bandeirante.pdf
    Ceil√¢ndia;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-8A_Ceilandia.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-8A_Ceilandia.pdf
    Guara;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-9A_Guara.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-9A_Guara.pdf
    Samambaia;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-10A_Samambaia.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-10A_Samambaia.pdf
    Santa Maria;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-11A_Santa-Maria.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-11A_Santa-Maria.pdf
    Sao Sebastiao;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-12A_Sao-Sebastiao.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-12A_Sao-Sebastiao.pdf
    Recanto das Emas;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-13A_Recanto-das-Emas.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-13A_Recanto-das-Emas.pdf
    Lago Sul;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-14A_Lago-Sul.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-14A_Lago-Sul.pdf
    Riacho Fundo;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-15A_Riacho-Fundo.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-15A_Riacho-Fundo.pdf
    Lago Norte;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-16A_Lago-Norte.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-16A_Lago-Norte.pdf
    Aguas Claras;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-17A_Aguas-Claras.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-17A_Aguas-Claras.pdf
    Riacho Fundo II;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-18A_Riacho-Fundo-II.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-18A_Riacho-Fundo-II.pdf
    Varjao;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-19A_Varjao.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-19A_Varjao.pdf
    Park Way;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-20A_Park-Way.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-20A_Park-Way.pdf
    SCIA;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-21A_SCIA.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-21A_SCIA.pdf
    Sobradinho II;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-22A_Sobradinho-II.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-22A_Sobradinho.pdf
    Jardim Botanico;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-23A_Jardim-Botanico.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-23A_Jardim-Botanico.pdf
    Itapoa;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-24A_Itapoa.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-24A_Itapoa.pdf
    SIA;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-25A_SIA.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-25A_SIA.pdf
    Vicente Pires;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-26A_Vicente-Pires.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-26A_Vicente-Pires.pdf
    Fercal;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-27A_Fercal.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-27A_Fercal.pdf
    Sol Nascente;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-28A_Por-do-Sol_Sol-Nascente.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-28A_Sol-Nascente_Por-do-Sol.pdf
    Arniqueira;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-II-%25E2%2580%2593-Mapa-29A_Arniqueira.pdf;https://www.seduh.df.gov.br/documents/6726485/38572899/LC1007_2022_Anexo-III-%25E2%2580%2593-Quadro-29A_Arniqueira.pdf
    """

    # Processar os dados
    regioes = {}
    for linha in dados_regioes.strip().split('\n'):
        partes = linha.split(';')
        if len(partes) == 3:
            regiao = partes[0]
            link1 = partes[1]
            link2 = partes[2]
            regioes[regiao] = {'Mapa': link1, 'Quadro': link2}

    # Interface do Streamlit
    st.markdown('üó∫Ô∏è **Consulta dos par√¢metros urban√≠sticos - Mapas e Quadros do DF**')
    st.markdown('Selecione uma regi√£o administrativa do Distrito Federal para acessar os documentos relacionados.')

    # Sele√ß√£o da regi√£o
    regiao_selecionada = st.selectbox(
        'Selecione a regi√£o:',
        sorted(regioes.keys()),
        index=0,
        help='Escolha uma regi√£o administrativa do DF'
    )

    # Exibir os links
    if regiao_selecionada:
        st.markdown(f'Documentos para {regiao_selecionada}')
        
        st.markdown(f'**Mapa:** [Abrir Mapa PDF]({regioes[regiao_selecionada]["Mapa"]})', unsafe_allow_html=True)
        st.markdown(f'**Quadro:** [Abrir Quadro PDF]({regioes[regiao_selecionada]["Quadro"]})', unsafe_allow_html=True)

    st.markdown('---')

    st.subheader("Aqui ser√° a inser√ß√£o dos par√¢metros urban√≠sticos")
    modo = st.radio("Escolha o modo de entrada dos par√¢metros urban√≠sticos:", ["Extra√ß√£o Autom√°tica", "Preenchimento Manual"])

    if modo == "Extra√ß√£o Autom√°tica":
        codigo = st.text_input("Informe o CIPU - V√£o ser apenas n√∫meros (N√£o confundir com o CIU)", "418924")

        if st.button("Consultar"):
            st.info("Enviando requisi√ß√£o...  - **Pode demorar at√© 10 segundos**")

            url_submit = "https://www.geoservicos.ide.df.gov.br/arcgis/rest/services/Geoprocessing/certidaoparametrosurb/GPServer/certidao_parametros_urb/submitJob"
            payload = {"codigo": codigo, "f": "json"}

            try:
                response = requests.post(url_submit, data=payload)
                response.raise_for_status()
                res_json = response.json()
            except Exception as e:
                st.error(f"Erro ao enviar requisi√ß√£o: {e}")
                st.stop()

            job_id = res_json.get("jobId")
            if not job_id:
                st.error("Job ID n√£o retornado.")
                st.stop()

            status_url = f"https://www.geoservicos.ide.df.gov.br/arcgis/rest/services/Geoprocessing/certidaoparametrosurb/GPServer/certidao_parametros_urb/jobs/{job_id}?f=json"
            while True:
                status_resp = requests.get(status_url).json()
                job_status = status_resp.get("jobStatus", "")
                if job_status == "esriJobSucceeded":
                    break
                elif job_status in ["esriJobFailed", "esriJobCancelled"]:
                    st.error("Job falhou ou foi cancelado.")
                    st.stop()
                time.sleep(2)

            job_info = requests.get(status_url).json()
            pdf_url = None

            if "results" in job_info:
                for key, val in job_info["results"].items():
                    if key == "arquivo":
                        result_url = f"https://www.geoservicos.ide.df.gov.br/arcgis/rest/services/Geoprocessing/certidaoparametrosurb/GPServer/certidao_parametros_urb/jobs/{job_id}/{val['paramUrl']}?f=json"
                        result = requests.get(result_url).json()
                        pdf_url = result.get("value")

            if not pdf_url:
                st.warning("Link para o PDF n√£o encontrado.")
                st.stop()

            st.subheader("üìÑ Certid√£o Gerada")
            st.markdown(f"[Clique aqui para abrir o PDF]({pdf_url})", unsafe_allow_html=True)

            # Extra√ß√£o de texto do PDF
            try:
                pdf_response = requests.get(pdf_url)
                pdf_response.raise_for_status()
                pdf_bytes = pdf_response.content

                doc = fitz.open(stream=pdf_bytes, filetype="pdf")
                texto = ""
                for page in doc:
                    texto += page.get_text()
                doc.close()

                # Extra√ß√£o dos par√¢metros
                linhas = texto.split("\n")
                
                def parse_float(valor_2):
                    try:
                        return float(valor_2.strip().replace(",", "."))
                    except:
                        return 0

                # Armazena todos os valores na sess√£o
                st.session_state['AfastamentoFrontal1'] = parse_float(linhas[106])
                st.session_state['AfastamentoFundo1'] = parse_float(linhas[107])
                st.session_state['AfastamentoDireito1'] = parse_float(linhas[108])
                st.session_state['AfastamentoEsquerdo1'] = parse_float(linhas[101])
                st.session_state['TaxaOcupacao1'] = parse_float(linhas[104])
                st.session_state['AlturaMaxima1'] = parse_float(linhas[87])
                st.session_state['CoeficienteAprovBasico1'] = parse_float(linhas[103])
                st.session_state['CoeficienteAprovMaximo1'] = parse_float(linhas[109])
                st.session_state['TaxaPermeabilidade1'] = parse_float(linhas[86])
                st.session_state['CotaSoleira1'] = linhas[83]
                st.session_state['pdf_linhas'] = linhas
                st.session_state['modo_auto'] = True

                st.success("Dados extra√≠dos com sucesso!")

            except Exception as e:
                st.error(f"Erro ao extrair texto do PDF: {e}")
                st.stop()

            # Mostra os valores extra√≠dos
            st.subheader("üìå Par√¢metros Urban√≠sticos Extra√≠dos Automaticamente (Apenas para Consulta)")
            st.markdown(f"**Afastamento Frontal:** {st.session_state['AfastamentoFrontal1']:.2f}")
            st.markdown(f"**Afastamento Fundo:** {st.session_state['AfastamentoFundo1']:.2f}")
            st.markdown(f"**Afastamento Direito:** {st.session_state['AfastamentoDireito1']:.2f}")
            st.markdown(f"**Afastamento Esquerdo:** {st.session_state['AfastamentoEsquerdo1']:.2f}")
            st.markdown(f"**Taxa de Ocupa√ß√£o:** {st.session_state['TaxaOcupacao1']:.2f}")
            st.markdown(f"**Altura M√°xima:** {st.session_state['AlturaMaxima1']:.2f}")
            st.markdown(f"**Coeficiente Aproveitamento B√°sico:** {st.session_state['CoeficienteAprovBasico1']:.2f}")
            st.markdown(f"**Coeficiente Aproveitamento M√°ximo:** {st.session_state['CoeficienteAprovMaximo1']:.2f}")
            st.markdown(f"**Taxa de Permeabilidade:** {st.session_state['TaxaPermeabilidade1']:.2f}")
            st.markdown(f"**Cota de Soleira:** {st.session_state['CotaSoleira1']}")

    else:  # Modo Manual
        st.session_state['modo_auto'] = False
        st.session_state['AfastamentoFrontal1'] = get_input_float("Afastamento Frontal")
        st.session_state['AfastamentoFundo1'] = get_input_float("Afastamento Fundo")
        st.session_state['AfastamentoDireito1'] = get_input_float("Afastamento Direito")
        st.session_state['AfastamentoEsquerdo1'] = get_input_float("Afastamento Esquerdo")
        st.session_state['TaxaOcupacao1'] = get_input_float("Taxa de Ocupa√ß√£o - Ex.:50")
        st.session_state['AlturaMaxima1'] = get_input_float("Altura M√°xima")
        st.session_state['CoeficienteAprovBasico1'] = get_input_float("Coeficiente Aproveitamento B√°sico - Ex.:2")
        st.session_state['CoeficienteAprovMaximo1'] = get_input_float("Coeficiente Aproveitamento M√°ximo - Ex.:3")
        st.session_state['TaxaPermeabilidade1'] = get_input_float("Taxa de Permeabilidade  - Ex.:80")
        st.session_state['CotaSoleira1'] = st.radio(
            "Posi√ß√£o da Cota de Soleira no par√¢metro Urban√≠stico:",
            [
                "Ponto M√©dio da Edifica√ß√£o",
                "Cota Altim√©trica m√©dia do Lote",
                "Ponto M√©dio da Testada Frontal"
            ]
        )

# Se√ß√£o 2: Dados do Projeto
with st.expander("**üìù Passo 2: Dados do Projeto**"):
    # Recupera todos os valores da sess√£o
    AfastamentoFrontal1 = st.session_state['AfastamentoFrontal1']
    AfastamentoFundo1 = st.session_state['AfastamentoFundo1']
    AfastamentoDireito1 = st.session_state['AfastamentoDireito1']
    AfastamentoEsquerdo1 = st.session_state['AfastamentoEsquerdo1']
    TaxaOcupacao1 = st.session_state['TaxaOcupacao1']
    AlturaMaxima1 = st.session_state['AlturaMaxima1']
    CoeficienteAprovBasico1 = st.session_state['CoeficienteAprovBasico1']
    CoeficienteAprovMaximo1 = st.session_state['CoeficienteAprovMaximo1']
    TaxaPermeabilidade1 = st.session_state['TaxaPermeabilidade1']
    CotaSoleira1 = st.session_state['CotaSoleira1']

    # Mostra os valores extra√≠dos
    st.markdown("üìå Par√¢metros Urban√≠sticos Utilizados (Apenas para Consulta) üìå")
    st.markdown(f"**Afastamento Frontal:** {AfastamentoFrontal1:.2f}")
    st.markdown(f"**Afastamento Fundo:** {AfastamentoFundo1:.2f}")
    st.markdown(f"**Afastamento Direito:** {AfastamentoDireito1:.2f}")
    st.markdown(f"**Afastamento Esquerdo:** {AfastamentoEsquerdo1:.2f}")
    st.markdown(f"**Taxa de Ocupa√ß√£o:** {TaxaOcupacao1:.2f}")
    st.markdown(f"**Altura M√°xima:** {AlturaMaxima1:.2f}")
    st.markdown(f"**Coeficiente Aproveitamento B√°sico:** {CoeficienteAprovBasico1:.2f}")
    st.markdown(f"**Coeficiente Aproveitamento M√°ximo:** {CoeficienteAprovMaximo1:.2f}")
    st.markdown(f"**Taxa de Permeabilidade:** {TaxaPermeabilidade1:.2f}")
    st.markdown(f"**Cota de Soleira:** {CotaSoleira1}")
    st.write("-----------------")
    
    # Se foi modo autom√°tico, temos as linhas do PDF dispon√≠veis
    if st.session_state['modo_auto']:
        linhas = st.session_state['pdf_linhas']
    

    
    # Campos para entrada manual
    AreaDoLote = get_input_float("√Årea do Lote (terreno)- Projeto Arquitet√¥nico")
    st.write("-----------------")


    st.write(f"Afastamento Frontal m√≠nimo permitido: {AfastamentoFrontal1}")

  
    AfastamentoFrontal3 = get_input_float("Afastamento Frontal - Projeto Arquitet√¥nico")
    if AfastamentoFrontal3 < AfastamentoFrontal1:
        st.error(f"üî¥ **O afastamento frontal √© inferior ao m√≠nimo permitido** üî¥")
    st.write("-----------------")

    st.markdown(f"Afastamento Fundo m√≠nimo permitido: {AfastamentoFundo1}")
    AfastamentoFundo3 = get_input_float("Afastamento Fundo - Projeto Arquitet√¥nico")
    if AfastamentoFundo3 < AfastamentoFundo1:
        st.error(f"üî¥ **O afastamento de fundo √© inferior ao m√≠nimo permitido** üî¥")
    st.write("-----------------")

    st.markdown(f"Afastamento Direito m√≠nimo permitido: {AfastamentoDireito1}")
    AfastamentoDireito3 = get_input_float("Afastamento Direito - Projeto Arquitet√¥nico")
    if AfastamentoDireito3 < AfastamentoDireito1:
        st.error(f"üî¥ **O afastamento da lateral direita √© inferior ao m√≠nimo permitido** üî¥")
    st.write("-----------------")

    st.markdown(f"Afastamento Esquerdo m√≠nimo permitido: {AfastamentoEsquerdo1}")
    AfastamentoEsquerdo3 = get_input_float("Afastamento Esquerdo - Projeto Arquitet√¥nico")
    if AfastamentoEsquerdo3 < AfastamentoEsquerdo1:
        st.error(f"üî¥ **O afastamento da lateral esquerda √© inferior ao m√≠nimo permitido** üî¥")
    st.write("-----------------")

    st.markdown(f"Altura M√°xima: {AlturaMaxima1}")
    Altura3 = get_input_float("Altura (m) - Projeto Arquitet√¥nico")
    if Altura3 > AlturaMaxima1:
        st.error(f"üî¥ **Altura M√°xima excedida** üî¥")    
    st.write("-----------------")

    st.markdown(f"√Årea m√≠nima perme√°vel: {AreaDoLote * (TaxaPermeabilidade1/100)}")
    AreaPermeavel3 = get_input_float("√Årea Perm√°vel - Projeto Arquitet√¥nico")
    if AreaPermeavel3 < (AreaDoLote * (TaxaPermeabilidade1/100)):
        st.error(f"üî¥ **O projeto n√£o possui a √°rea de permeabilidade m√≠nima** üî¥")   
    st.write("-----------------")

    st.markdown(f"√Årea total de constru√ß√£o permitida: {AreaDoLote * CoeficienteAprovBasico1}")
    AreaTotalConstrucao3 = get_input_float("√Årea total da Constru√ß√£o - Projeto Arquitet√¥nico")
    if AreaTotalConstrucao3 > (AreaDoLote * CoeficienteAprovBasico1):
        st.error(f"üî¥ **Extrapolado o coeficiente de aproveitamento b√°sico do lote** üî¥")  
    st.write("-----------------")

    st.markdown(f"√Årea de constru√ß√£o do t√©rreo (Para c√°lculo da taxa de ocupa√ß√£o): {AreaDoLote * (TaxaOcupacao1/100)}")
    AreaConstruaoTerreo3 = get_input_float("√Årea de constru√ß√£o do t√©rreo (para c√°lculo do coeficiente de aproveitamento) - Projeto Arquitet√¥nico")
    if AreaConstruaoTerreo3 > (AreaDoLote * (TaxaOcupacao1/100)):
        st.error(f"üî¥ **Extrapolado o coeficiente de aproveitamento do lote** üî¥")  
    st.write("-----------------")

    st.markdown(f"Cota de soleira extra√≠da atrav√©s da Seduh - GeoPortal")
    CotaSoleiraNumerica3 = get_input_float("Cota de Soleira Ex.: 1.105,64: - Projeto Arquitet√¥nico")    
    CotaCoroamento3 = CotaSoleiraNumerica3 + Altura3
    st.markdown(f"Cota de coroamento calculada: {CotaCoroamento3}")
    st.write("-----------------")

    PossuiCoroamento = st.radio(
    "No Corte da Arquitetura, possui a cota da soleira com sua respectiva metragem at√© o ponto mais alto da edifica√ß√£o?",
    [
        "Sim",
        "N√£o"
    ]
    )
    if PossuiCoroamento == "N√£o":
        st.error("**‚ùå Falta a cota da soleira e dist√¢ncia at√© o coroamento da edifica√ß√£o**")
    st.write("-----------------")


    CotaSoleira3 = st.radio(
    "Crit√©rio utilizado para determina√ß√£o da Cota de Soleira:",
    [
        "Ponto M√©dio da Edifica√ß√£o",
        "Cota Altim√©trica m√©dia do Lote",
        "Ponto M√©dio da Testada Frontal"
    ]
    )
    st.write("-----------------")

    st.markdown("Medidas do terreno")   
    TestadaFrontal3 = get_input_float("Testada Frontal do lote - Projeto Arquitet√¥nico")
    TestadaFundo3 = get_input_float("Testada Fundo do lote - Projeto Arquitet√¥nico")
    LateralDireito3 = get_input_float("Lateral da lateral Direita do lote - Projeto Arquitet√¥nico")
    LateralEsquerdo3 = get_input_float("Lateral da lateral Esquerda do lote - Projeto Arquitet√¥nico")



#terceiro t√≥pico - dados da topografia
with st.expander("**üìù Passo 3: Dados da Topografia**"):
    AfastamentoFrontal4 = get_input_float("Afastamento Frontal - Topografia")
    AfastamentoFundo4 = get_input_float("Afastamento Fundo - Topografia")
    AfastamentoDireito4 = get_input_float("Afastamento Direito - Topografia")
    AfastamentoEsquerdo4 = get_input_float("Afastamento Esquerdo - Topografia")
    TestadaFrontal4 = get_input_float("Testada Frontal - Topografia")
    TestadaFundo4 = get_input_float("Testada Fundo - Topografia")
    LateralDireito4 = get_input_float("Lateral Direito - Topografia")
    LateralEsquerdo4 = get_input_float("Lateral Esquerdo - Topografia")
    CotaCoroamento4 = get_input_float("Cota de Coroamento - Topografia")
    CotaSoleiraNumerica4 = get_input_float("Cota de Soleira - Topografia:")
    CotaSoleiraTopografia = st.radio(
    "Crit√©rio utilizado para determina√ß√£o da posi√ß√£o da Cota de Soleira na topografia:",
    [
        "Ponto M√©dio da Edifica√ß√£o",
        "Cota Altim√©trica m√©dia do Lote",
        "Ponto M√©dio da Testada Frontal"
    ]
    )


#quarto t√≥pico - Documenta√ß√£o do im√≥vel
with st.expander("**üìù Passo 4: Documenta√ß√£o do Im√≥vel**"):
    TestadaFrontal5 = get_input_float("Testada Frontal - Documenta√ß√£o")
    TestadaFundo5 = get_input_float("Testada Fundo - Documenta√ß√£o")
    LateralDireito5 = get_input_float("Lateral Direito - Documenta√ß√£o")
    LateralEsquerdo5 = get_input_float("Lateral Esquerdo - Documenta√ß√£o")
    AreaDoLote5 = get_input_float("√Årea do Lote - Documenta√ß√£o")
    CotaSoleiraSeudh = get_input_float("Cota de Soleira da SEDUH - Documenta√ß√£o")

    # Bot√£o principal com padr√£o "Sim"
    opcao_principal = st.radio("Existe condom√≠nio devidamente constituido? Ex.: Park Way, SMBD...", ["N√£o", "Sim"], index=0)

    # Define vari√°veis com valores padr√£o
    instituicao = plano = ngb = None

    if opcao_principal == "Sim":
        instituicao = st.radio("Consta Institui√ß√£o de Condom√≠nio no processo?:", ["Sim", "N√£o"])
        plano = st.radio("Consta o Plano de Ocupa√ß√£o no processo:", ["Sim", "N√£o"])
        ngb = st.radio("Consta a NGB no processo:", ["Sim", "N√£o"])

#quinto t√≥pico - An√°lise Autom√°tica
with st.expander("**üìù Passo 5: An√°lise Autom√°tica**"):
    CoeficienteAproveitamentoReal = ((TaxaOcupacao1/100) * AreaDoLote)
    CoeficienteBasicoreal = (CoeficienteAprovBasico1 * AreaDoLote)
    AreaVerdeMinima = AreaPermeavel3 * AreaDoLote

    st.subheader("Projeto")

    if CotaSoleiraTopografia != CotaSoleira3:
        st.write("üî¥ **A posi√ß√£o da Cota de Soleira informada na topografia √© diferente da informada no Projeto Arquitet√¥nico** üî¥")

    if CotaSoleira3 != CotaSoleira1:
        st.write("üî¥ **A posi√ß√£o da Cota de Soleira informada na arquitetura √© diferente do par√¢metro urban√≠stico** üî¥")

    #coeficiente de aproveitamento b√°sico
    st.write(f"**üèöÔ∏è √Årea Constru√≠da total:** {AreaTotalConstrucao3}")
    st.write(f"**√Årea de Constru√ß√£o m√°xima permitida para o lote:** {CoeficienteBasicoreal}")     
    if AreaTotalConstrucao3 > CoeficienteBasicoreal:
        st.write("üî¥ A √°rea total de constru√ß√£o ultrapassou o m√°ximo permitido üî¥")
    else:
        st.write("‚úÖ √Årea total de constru√ß√£o dentro do limite")
    st.write("-----------------")

    #√°rea verde
    st.write(f"**üå≥ √Årea verde no projeto:** {AreaPermeavel3}")
    st.write(f"**√Årea de permeabilidade m√≠nima:** {AreaVerdeMinima}")     
    if AreaPermeavel3 >= AreaVerdeMinima:
        st.write("‚úÖ √Årea perme√°vel dentro dos limites")
    #else:
        st.write("üî¥ √Årea verde insuficiente üî¥")
    st.write("-----------------")   

    #taxa de ocupa√ß√£o
    st.write(f"**üî≥ √Årea da Taxa de Ocupa√ß√£o do projeto:** {AreaConstruaoTerreo3}")
    st.write(f"**√Årea da Taxa de Ocupa√ß√£o permitida para o lote:** {CoeficienteAproveitamentoReal}")     
    if AreaConstruaoTerreo3 > CoeficienteAproveitamentoReal:
        st.write("üî¥ Taxa de ocupa√ß√£o ultrapassada üî¥")
    else:
        st.write("‚úÖ Taxa de ocupa√ß√£o atendida")
    st.write("-----------------")

    # altura m√°xima
    if Altura3 <= AlturaMaxima1:
        st.write("‚úÖ Altura nos limites permitidos")
    else: 
        st.write("üî¥ Altura m√°xima maior do que a permitida üî¥")
        st.write(f"**Altura m√°xima permitida:** {AlturaMaxima1}")
        st.write(f"**Altura de acordo com o projeto arquitet√¥nico:** {Altura3}")
        st.write("--------------------------------------")

    #afastamento frontal    
    if (AfastamentoFrontal3 >= AfastamentoFrontal1):
        st.write("‚úÖ O afastamento frontal no projeto arquitet√¥nico est√° dentro do limite permitido.")
    else: 
        st.write("üî¥ O afastamento frontal no projeto arquitet√¥nico N√ÉO est√° dentro do limite permitido. üî¥")

    #afastamento fundos   
    if (AfastamentoFundo3 >= AfastamentoFundo1):
        st.write("‚úÖ O afastamento de fundos no projeto arquitet√¥nico est√° dentro do limite permitido.")
    else: 
        st.write("üî¥ O afastamento de fundos no projeto arquitet√¥nico N√ÉO est√° dentro do limite permitido. üî¥")

    #afastamento direito  
    if (AfastamentoDireito3 >= AfastamentoDireito1):
        st.write("‚úÖ O afastamento da lateral direita no projeto arquitet√¥nico est√° dentro do limite permitido.")
    else: 
        st.write("üî¥ O afastamento da lateral direita no projeto arquitet√¥nico N√ÉO est√° dentro do limite permitido. üî¥")

    #afastamento esquerda
    if (AfastamentoEsquerdo3 >= AfastamentoEsquerdo1):
        st.write("‚úÖ O afastamento da lateral esquerda no projeto arquitet√¥nico est√° dentro do limite com rela√ß√£o ao limite permitido.")
    else: 
        st.write("üî¥ O afastamento da lateral esquerda no projeto arquitet√¥nico N√ÉO est√° dentro do limite com rela√ß√£o ao limite permitido.üî¥")

    #altura topografia
    AlturaTopografia = 0
    AlturaTopografia = CotaCoroamento4 - CotaSoleiraNumerica4
    st.write(f"**Altura da Edifica√ß√£o de acordo com a Topografia:** {AlturaTopografia}")

    st.subheader("Documenta√ß√£o do Im√≥vel")
    if AreaDoLote5 != AreaDoLote:
        st.write("üî¥ A √°rea da documenta√ß√£o N√ÉO √© a mesma do projeto arquitet√¥nico üî¥")
    else:
        st.write("‚úÖ A √°rea da documenta√ß√£o √© a mesma do projeto arquitet√¥nico")

    if TestadaFrontal5 != TestadaFrontal4:
        st.write("üî¥ A Testada Frontal na documenta√ß√£o N√ÉO √© a mesma da Tesada Frontal da Topografia üî¥")
    else:
        st.write("‚úÖ A Testada Frontal na documenta√ß√£o √© a mesma da Tesada Frontal da Topografia")

    if TestadaFundo5 != TestadaFundo4:
        st.write("üî¥ A Testada Fundos na documenta√ß√£o N√ÉO √© a mesma da Tesada Fundos da Topografia üî¥")
    else:
        st.write("‚úÖ A Testada Fundos na documenta√ß√£o √© a mesma da Tesada Fundos da Topografia")

    if LateralDireito5 != LateralDireito4:
        st.write("üî¥ A Lateral Direita na documenta√ß√£o N√ÉO √© a mesma da Lateral Direita da Topografia üî¥")
    else:
        st.write("‚úÖ A Lateral Direita na documenta√ß√£o √© a mesma da Lateral Direita da Topografia")

    if LateralEsquerdo5 != LateralEsquerdo4:
        st.write("üî¥ A Lateral Esquerda na documenta√ß√£o N√ÉO √© a mesma da Lateral Esquerda da Topografia üî¥")
    else:
        st.write("‚úÖ A Lateral Esquerda na documenta√ß√£o √© a mesma da Lateral Esquerda da Topografia")

    if CotaSoleiraSeudh == CotaSoleiraNumerica4:
        st.write("‚úÖ O valor da Cota da soleira da Seduh(GeoPortal) √© a mesma da topografia")
    else:
        if abs(CotaSoleiraSeudh - CotaSoleiraNumerica4) <= 0.20:
            st.write("‚úÖ O valor da Cota da soleira da Seduh(GeoPortal) possui uma diferen√ßa de + ou - 20cm com rela√ß√£o a topografia, situa√ß√£o aceit√°vel")
        else:
            st.write("üî¥ O valor da Cota da soleira da Seduh(GeoPortal) possui diverg√™ncia, n√£o aceit√°vel, com rela√ß√£o a topografia üî¥")


    if opcao_principal == "Sim":
        if instituicao == "N√£o":
            st.write("üî¥ Falta a Institui√ß√£o de Condom√≠nio.")
        if plano == "N√£o":
            st.write("üî¥ Falta o Plano de Ocupa√ß√£o.")
        if ngb == "N√£o":
            st.write("üî¥ Falta a NGB.")

    st.subheader("Topografia do Im√≥vel")
    
    # afastamentos
    if abs(AfastamentoFrontal4 - AfastamentoFrontal3) <= min(0.50, AfastamentoFrontal3 * 0.05):
        st.write("‚úÖ O afastamento frontal na topografia est√° dentro do limite com rela√ß√£o ao projeto arquitet√¥nico.")
    else: 
        st.write("üî¥ O afastamento frontal na topografia N√ÉO est√° dentro do limite com rela√ß√£o ao projeto arquitet√¥nico. üî¥")
        st.write(f"**Afastamento frontal de acordo com o Projeto Arquitet√¥nico:** {AfastamentoFrontal3}")
        st.write(f"**Afastamento m√°ximo e m√≠nimo (5%) permitidos** {AfastamentoFrontal3 * 1.05} e {AfastamentoFrontal3 * 0.95} limitados a 50cm")
        st.write(f"**Afastamento frontal de acordo com a Topografia:** {AfastamentoFrontal4}")
        st.write("--------------------------------------")

    if abs(AfastamentoFundo4 - AfastamentoFundo3) <= min(0.50, AfastamentoFrontal3 * 0.05):
        st.write("‚úÖ O afastamento fundos na topografia est√° dentro do limite com rela√ß√£o ao projeto arquitet√¥nico.")
    else: 
        st.write("üî¥ O afastamento fundos na topografia N√ÉO est√° dentro do limite com rela√ß√£o ao projeto arquitet√¥nico. üî¥")
        st.write(f"**Afastamento fundos de acordo com o Projeto Arquitet√¥nico:** {AfastamentoFundo3}")
        st.write(f"**Afastamento m√°ximo e m√≠nimo (5%) permitidos** {AfastamentoFundo3 * 1.05} e {AfastamentoFundo3 * 0.95} limitados a 50cm")
        st.write(f"**Afastamento fundos de acordo com a Topografia:** {AfastamentoFundo4}")
        st.write("--------------------------------------")   

    if abs(AfastamentoDireito4 - AfastamentoDireito3) <= min(0.50, AfastamentoFrontal3 * 0.05):
        st.write("‚úÖ O afastamento da Lateral Direita na topografia est√° dentro do limite com rela√ß√£o ao projeto arquitet√¥nico.")
    else: 
        st.write("üî¥ O afastamento da Lateral Direita na topografia N√ÉO est√° dentro do limite com rela√ß√£o ao projeto arquitet√¥nico. üî¥")
        st.write(f"**Afastamento da Lateal Direita de acordo com o Projeto Arquitet√¥nico:** {AfastamentoDireito3}")
        st.write(f"**Afastamento m√°ximo e m√≠nimo (5%) permitidos** {AfastamentoDireito3 * 1.05} e {AfastamentoDireito3 * 0.95} limitados a 50cm")
        st.write(f"**Afastamento da Lateal Direita de acordo com a Topografia:** {AfastamentoDireito4}")
        st.write("--------------------------------------")      

    if abs(AfastamentoEsquerdo4 - AfastamentoEsquerdo3) <= min(0.50, AfastamentoFrontal3 * 0.05):
        st.write("‚úÖ O afastamento da Lateral Esquerda na topografia est√° dentro do limite com rela√ß√£o ao projeto arquitet√¥nico.")
    else: 
        st.write("üî¥ O afastamento da Lateral Esquerda na topografia N√ÉO est√° dentro do limite com rela√ß√£o ao projeto arquitet√¥nico. üî¥")
        st.write(f"**Afastamento da Lateal Esquerda de acordo com o Projeto Arquitet√¥nico:** {AfastamentoEsquerdo3}")
        st.write(f"**Afastamento m√°ximo e m√≠nimo (5%) permitidos** {AfastamentoEsquerdo3 * 1.05} e {AfastamentoEsquerdo3 * 0.95} limitados a 50cm")
        st.write(f"**Afastamento da Lateal Direita de acordo com a Topografia:** {AfastamentoEsquerdo4}")
        st.write("--------------------------------------")

    #testadas
    if TestadaFrontal4 != TestadaFrontal3:
        st.write("üî¥ A Testada Frontal (Frente do im√≥vel) da Topografia N√ÉO √© a mesma da Arquitetura üî¥")
    else:
        st.write("‚úÖ A Testada Frontal (Frente do im√≥vel) da Topografia √© a mesma da Arquitetura")

    if TestadaFundo4 != TestadaFundo3:
        st.write("üî¥ A Testada Fundos (Fundos do im√≥vel) da Topografia N√ÉO √© a mesma da Arquitetura üî¥")
    else:
        st.write("‚úÖ A Testada Fundos (Fundos do im√≥vel) da Topografia √© a mesma da Arquitetura")

    if LateralDireito4 != LateralDireito3:
        st.write("üî¥ A Testada da lateral direita (Lateral do im√≥vel) da Topografia N√ÉO √© a mesma da Arquitetura üî¥")
    else:
        st.write("‚úÖ A Testada da lateral direita (Lateral do im√≥vel) da Topografia √© a mesma da Arquitetura")
      
    if LateralEsquerdo4 != LateralEsquerdo3:
        st.write("üî¥ A Testada da lateral esquerda (Lateral do im√≥vel) da Topografia N√ÉO √© a mesma da Arquitetura üî¥")
    else:
        st.write("‚úÖ A Testada da lateral esquerda (Lateral do im√≥vel) da Topografia √© a mesma da Arquitetura")
